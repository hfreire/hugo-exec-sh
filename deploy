#!/usr/bin/env bash

pushd $(cd -P -- "$(dirname -- "$0")" && pwd -P)/..

TF_IN_AUTOMATION=true
TF_PLAN=terraform.tfplan

function clean_and_exit {
  [ -f ${TERRAFORM_PLAN} ] && rm -f $TERRAFORM_PLAN

  popd
}

trap clean_and_exit EXIT
trap 'exit' ERR

[ -z ${NAME-} ] && exit 1
USER_ENV=env.sh
[ -f ${USER_ENV} ] && { set -a; . $USER_ENV; set +a; }

[ -z ${ANTIFRAGILE_STATE_AWS_REGION-} ] || [ -z ${ANTIFRAGILE_STATE_AWS_S3_BUCKET-} ] || [ -z ${ANTIFRAGILE_STATE_AWS_DYNAMODB_TABLE-} ] || \
terraform init -upgrade \
-backend-config="region=${ANTIFRAGILE_STATE_AWS_REGION}" \
-backend-config="bucket=${ANTIFRAGILE_STATE_AWS_S3_BUCKET}" \
-backend-config="key=${NAME}.tfstate" \
-backend-config="encrypt=true" \
-backend-config="dynamodb_table=${ANTIFRAGILE_STATE_AWS_DYNAMODB_TABLE}" || exit 1

terraform get -update=true || exit 1

USER_PRE_DEPLOY=./pre-deploy.sh
[ -x ${USER_PRE_DEPLOY} ] && $(eval $USER_PRE_DEPLOY)

terraform plan -input=false -out $TF_PLAN -target=module.${NAME} || exit 1

terraform apply -input=false -auto-approve $TF_PLAN || exit 1

USER_POST_DEPLOY=./post-deploy.sh
[ -x ${USER_POST_DEPLOY} ] && $(eval $USER_POST_DEPLOY)

exit 0
