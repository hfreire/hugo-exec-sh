diff --git a/current/core/server/web/parent-app.js b/current/core/server/web/parent-app.js
index 1673792d1..143a8b62e 100644
--- a/current/core/server/web/parent-app.js
+++ b/current/core/server/web/parent-app.js
@@ -13,6 +13,25 @@ module.exports = function setupParentApp(options = {}) {

     // ## Global settings

+    // If we are behind a proxy that uses a non-standard forwarded proto header,
+    // we should replace the X-Forwarded-Proto with its value
+    var forwardedProtoHeader = config.get('forwarded_proto_header');
+    if (forwardedProtoHeader) {
+        parentApp.use(function (req, res, next) {
+            if (req.headers[forwardedProtoHeader]) {
+                req.headers['x-forwarded-proto'] = req.headers[forwardedProtoHeader];
+                req.headers['x-forwarded-port'] = req.headers[forwardedProtoHeader] === 'https' ? 443 : 80;
+            }
+
+            next();
+        });
+    }
+
+    // Make a ping endpoint available that always returns 200 OK
+    parentApp.get('/ping', function (req, res) {
+        res.send({answer: 'pong'});
+    });
+
     // Make sure 'req.secure' is valid for proxied requests
     // (X-Forwarded-Proto header will be checked, if present)
     parentApp.enable('trust proxy');
diff --git a/current/core/server/web/shared/middlewares/log-request.js b/current/core/server/web/shared/middlewares/log-request.js
index c282e53b9..22ec7f957 100644
--- a/current/core/server/web/shared/middlewares/log-request.js
+++ b/current/core/server/web/shared/middlewares/log-request.js
@@ -7,13 +7,15 @@ module.exports = function logRequest(req, res, next) {
     const startTime = Date.now();

     function logResponse() {
-        res.responseTime = (Date.now() - startTime) + 'ms';
+        res.responseTime = (Date.now() - startTime);
         req.userId = req.user ? (req.user.id ? req.user.id : req.user) : null;

         if (req.err && req.err.statusCode !== 404) {
-            common.logging.error({req: req, res: res, err: req.err});
-        } else {
-            common.logging.info({req: req, res: res});
+            common.logging.error(req.err);
+        }
+
+        if (req.headers['user-agent'] !== 'Amazon CloudFront') {
+            common.logging.debug(`${req.ips ||Â req.ip} - ${req.userId || '-'} [${new Date().toISOString()}] "${req.method} ${req.originalUrl}" HTTP/${req.httpVersionMajor}.${req.httpVersionMinor} ${res.statusCode} ${res.getHeader('content-length') || (res.__headers && res.__headers['Content-Length']) || '-'} "${req.get('referer') || '-'}" "${req.get('user-agent') || '-'}" ${res.responseTime}`);
         }

         res.removeListener('finish', logResponse);
diff --git a/current/core/server/lib/common/logging.js b/current/core/server/lib/common/logging.js
index d3d332a42..d312b3a02 100644
--- a/current/core/server/lib/common/logging.js
+++ b/current/core/server/lib/common/logging.js
@@ -1,15 +1,14 @@
-const config = require('../../config'),
-    {logging} = require('ghost-ignition');
-
-module.exports = logging({
-    name: config.get('logging:name'),
-    env: config.get('env'),
-    path: config.get('logging:path') || config.getContentPath('logs'),
-    domain: config.get('url'),
-    mode: config.get('logging:mode'),
-    level: config.get('logging:level'),
-    transports: config.get('logging:transports'),
-    gelf: config.get('logging:gelf'),
-    loggly: config.get('logging:loggly'),
-    rotation: config.get('logging:rotation')
+const Logger = require('modern-logger');
+Logger.configure({
+    transports: {
+        console: [
+            {
+                colorize: false,
+                timestamp: false
+            }
+        ]
+    },
+    enableEmoji: false
 });
+
+module.exports = Logger;
