#!/usr/bin/env bash

[ -z ${NAME-} ] && exit 1

VERSION=$(if [ -z ${VERSION-} ]; then echo $(if [ -z ${DOCKER_TAG-} ]; then echo latest; else echo $DOCKER_TAG; fi); else echo $VERSION; fi)

pushd $(cd -P -- "$(dirname -- "$0")" && pwd -P)/..

[ -z ${ANTIFRAGILE_STATE_AWS_REGION-} ] || [ -z ${ANTIFRAGILE_STATE_AWS_S3_BUCKET-} ] || [ -z ${ANTIFRAGILE_STATE_AWS_DYNAMODB_TABLE-} ] || \
terraform init -upgrade \
-backend-config="region=${ANTIFRAGILE_STATE_AWS_REGION}" \
-backend-config="bucket=${ANTIFRAGILE_STATE_AWS_S3_BUCKET}" \
-backend-config="key=${NAME}.tfstate" \
-backend-config="encrypt=true" \
-backend-config="dynamodb_table=${ANTIFRAGILE_STATE_AWS_DYNAMODB_TABLE}" || exit 1

terraform get -update=true || exit 1

terraform taint module.${NAME}.module.cluster.module.services.module.tasks.aws_ecs_task_definition.antifragile-service

terraform plan \
-input=false \
-var "state_aws_region=${ANTIFRAGILE_STATE_AWS_REGION}" \
-var "state_aws_s3_bucket=${ANTIFRAGILE_STATE_AWS_S3_BUCKET}" \
-var "docker_repo=${DOCKER_REPO}" \
-var "docker_image_tag=${VERSION}" \
-target=module.${NAME} \
-out terraform.tfplan || exit 1

terraform apply -input=false -auto-approve terraform.tfplan || exit 1

terraform output -json | jq 'with_entries(.value |= .value)' > terraform.json || exit 1

popd

exit 0
